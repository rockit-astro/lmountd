#!/usr/bin/env python3.6
#
# This file is part of lmountd.
#
# lmountd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# lmountd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with lmountd.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon for controlling a Planewave L mount through its http interface via Pyro"""

import argparse
import threading
import time
from astropy.coordinates import AltAz, FK5, ICRS, SkyCoord, EarthLocation, get_moon, get_sun
from astropy.time import Time
import astropy.units as u
import requests
import Pyro4

from warwick.observatory.common import log, TryLock
from warwick.observatory.common.helpers import pyro_client_matches
from warwick.observatory.lmount import CommandStatus, Config, MountState

# Set automatically when generating RPM package
SOFTWARE_VERSION = "UNKNOWN"


def _parse_mountstate(status):
    """Parse a MountState value from the PWI status dictionary"""
    if status is None or status['mount.is_connected'] != 'true':
        return MountState.Disabled

    # Simplify the external API we expose by also treating unpowered axes as disabled
    if status['mount.axis0.is_enabled'] != 'true' or status['mount.axis1.is_enabled'] != 'true':
        return MountState.Disabled

    if status['mount.is_slewing'] == 'true':
        return MountState.Slewing

    if status['mount.is_tracking'] == 'true':
        return MountState.Tracking

    return MountState.Stopped


def _parse_location(status):
    """Parse an astropy EarthLocation value from the PWI status dictionary"""
    return EarthLocation(
        lat=status['site.latitude_degs'],
        lon=status['site.longitude_degs'],
        height=status['site.height_meters'])


class MountDaemon:
    """Daemon interface for talon subsystems"""
    def __init__(self, config):
        self._config = config

        # PWI doesn't force the mount to be homed between powering on and operation.
        # Force this requirement through the daemon instead.
        self._axes_homed = False
        self._axes_homing = False

        self._ha_positive_limit = self._config.ha_soft_limits[1] * u.deg
        self._ha_negative_limit = self._config.ha_soft_limits[0] * u.deg
        self._dec_positive_limit = self._config.dec_soft_limits[1] * u.deg
        self._dec_negative_limit = self._config.dec_soft_limits[0] * u.deg

        self._pointing_condition = threading.Condition()
        self._force_stopped = False

        # Only one command may be active at a time (except for stop)
        self._command_lock = threading.Lock()

    def _request_with_status(self, command, **kwargs):
        """
        Send a command to PWI4 and return its status response
        Returns None if the command failed or a dictionary of the mount status
        """
        try:
            url = 'http://{}:{}/{}'.format(self._config.pwi_host, self._config.pwi_port, command)
            response = requests.get(url, timeout=self._config.pwi_timeout, params=kwargs)
            response.raise_for_status()

            data = response.text.split("\n")
            status = {}
            for line in data:
                fields = line.split("=", 1)
                if len(fields) == 2:
                    status[fields[0]] = fields[1]
            return status
        except Exception:
            return None

    def _validate_pointing(self, coords, log_failed_prefix):
        """
        Check whether the given coordinate is within our soft HA and Dec limits.
        Returns CommandStatus.Succeeded if valid, otherwise logs and returns the appropriate error status
        """
        icrs = coords.icrs
        lst = Time(coords.obstime, location=coords.location).sidereal_time('apparent')
        ha = (lst - icrs.ra).wrap_at(12 * u.hourangle)
        dec = icrs.dec

        if ha < self._ha_negative_limit or ha > self._ha_positive_limit:
            log.error(self._config.log_name, log_failed_prefix + '; ha {} outside limit ({}, {})'.format(
                ha, self._ha_negative_limit, self._ha_positive_limit))
            return CommandStatus.OutsideHALimits

        if dec < self._dec_negative_limit or dec > self._dec_positive_limit:
            log.error(self._config.log_name, log_failed_prefix + '; dec {} outside limit ({}, {})'.format(
                dec, self._dec_negative_limit, self._dec_positive_limit))
            return CommandStatus.OutsideDecLimits
        return CommandStatus.Succeeded

    def _point(self, command, expected_state, **kwargs):
        """
        Send a mount/goto_* command and wait for slewing to complete.
        Returns True on success or logs and returns False on error
        """
        with self._pointing_condition:
            if self._request_with_status(command, **kwargs) is None:
                log.error(self._config.log_name, 'Pointing failed: failed to issue ' + command)

            start = Time.now()
            while True:
                if self._force_stopped:
                    break

                status = self._request_with_status('status')
                state = _parse_mountstate(status)
                if state != MountState.Slewing or (Time.now() - start).to_value(u.s) > self._config.slew_timeout:
                    break

                self._pointing_condition.wait(self._config.slew_poll_interval)

        if self._force_stopped:
            log.error(self._config.log_name, 'Pointing failed: aborted')
            return False

        if state == expected_state:
            return True

        self._request_with_status('mount/stop')

        if state == MountState.Slewing:
            log.error(self._config.log_name, 'Pointing failed: timed out')
        else:
            log.error(self._config.log_name, 'Pointing failed: completed with {} instead of {}'.format(
                MountState.label(state), MountState.label(expected_state)))

        return False

    @Pyro4.expose
    def report_status(self):
        """Returns a dictionary containing the current telescope state"""

        status = self._request_with_status('status')
        if status is None:
            return {
                'date': Time.now().strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
                'state': MountState.Disabled,
                'state_label': MountState.label(MountState.Disabled),
                'software_version': SOFTWARE_VERSION,
            }

        state = _parse_mountstate(status)
        location = _parse_location(status)

        # Prefer the mount timestamp if we have it - this was when the coordinates were calculated
        # If the mount is not connected we can safely fall back to the request timestamp
        if state == MountState.Disabled:
            timestamp = status['response.timestamp_utc']
        else:
            timestamp = status['mount.timestamp_utc']

        # Work around PWI4 reporting mount.is_slewing=false when finding home
        if self._axes_homing:
            state = MountState.Slewing

        date = Time(Time.strptime(timestamp, '%Y-%m-%d %H:%M:%S.%f'), location=location)
        data = {
            'date': date.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
            'state': state,
            'state_label': MountState.label(state),
            'software_version': SOFTWARE_VERSION,
            'pwi_version': status['pwi4.version'],
            'site_latitude': location.lat.to_value(u.deg),
            'site_longitude': location.lon.to_value(u.deg),
            'site_elevation': location.height.to_value(u.m),
        }

        if state != MountState.Disabled:
            lst = u.Quantity(status['site.lmst_hours'], unit=u.hourangle)

            data.update({
                'lst': lst.to_value(u.deg),
                'axes_homed': self._axes_homed
            })

            if state >= MountState.Stopped:
                pointing = SkyCoord(
                    ra=status['mount.ra_j2000_hours'],
                    dec=status['mount.dec_j2000_degs'],
                    unit=(u.hourangle, u.deg),
                    frame='icrs')

                data.update({
                    'ra': pointing.ra.to_value(u.deg),
                    'dec': pointing.dec.to_value(u.deg),
                    'offset_ra': 0,
                    'offset_dec': 0,

                    # Note: this field depends on a custom patched version of pwi4
                    'ha': u.Quantity(status['mount.ha_hours'], unit=u.hourangle).to_value(u.deg),

                    'alt': u.Quantity(status['mount.altitude_degs'], unit=u.deg).to_value(u.deg),
                    'az': u.Quantity(status['mount.azimuth_degs'], unit=u.deg).to_value(u.deg),

                    'moon_separation': get_moon(date).separation(pointing).to_value(u.deg),
                    'sun_separation': get_sun(date).separation(pointing).to_value(u.deg),
                })

        return data

    @Pyro4.expose
    def find_homes(self):
        """Finds the mount home positions"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            status = self._request_with_status('status')
            state = _parse_mountstate(status)
            if state == MountState.Disabled:
                return CommandStatus.MountNotInitialized

            log.info(self._config.log_name, 'Homing axes')
            try:
                self._axes_homed = False
                self._axes_homing = True

                # NOTE: this will return immediately because PWI4 reports
                # mount.is_slewing=false while finding homes
                if not self._point('mount/find_home', MountState.Stopped):
                    log.error(self._config.log_name, 'Failed to issue home command')
                    return CommandStatus.Failed

                # Instead wait until the position has converged
                with self._pointing_condition:
                    start = Time.now()
                    status = self._request_with_status('status')
                    last_coord = SkyCoord(
                        alt=status['mount.altitude_degs'],
                        az=status['mount.azimuth_degs'],
                        unit=u.deg,
                        frame='altaz')

                    while True:
                        self._pointing_condition.wait(self._config.slew_poll_interval)
                        if self._force_stopped or (Time.now() - start).to_value(u.s) > self._config.slew_timeout:
                            break

                        status = self._request_with_status('status')
                        coord = SkyCoord(
                            alt=status['mount.altitude_degs'],
                            az=status['mount.azimuth_degs'],
                            unit=u.deg,
                            frame='altaz')

                        if coord.separation(last_coord) < 0.1 * u.deg:
                            self._axes_homed = True
                            break

                        last_coord = coord

                    if not self._axes_homed:
                        self._request_with_status('mount/stop')
                        log.error(self._config.log_name, 'Homing failed')
                        return CommandStatus.Failed

                    log.info(self._config.log_name, 'Homing complete')
                    return CommandStatus.Succeeded
            finally:
                self._axes_homing = False

    @Pyro4.expose
    def initialize(self):
        """Connect to mount and enable motor power"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            status = self._request_with_status('status')
            if status is None:
                return CommandStatus.MountControlNotRunning

            state = _parse_mountstate(status)
            if state != MountState.Disabled:
                return CommandStatus.MountNotDisabled

            # Simplify the model that we expose to other code by considering the
            # mount to be disabled if motor power is disabled. This ensures that
            # we can correctly keep track of whether we are homed or not.
            if self._request_with_status('mount/connect') is None:
                log.error(self._config.log_name, 'Failed to connect to mount')
                return CommandStatus.Failed

            if self._request_with_status('mount/enable', axis=-1) is None:
                log.error(self._config.log_name, 'Failed to enable motor power')
                return CommandStatus.Failed

            self._axes_homed = False

            # Wait a second for the mount to respond before double checking that things are how we expect
            time.sleep(1)
            status = self._request_with_status('status')
            state = _parse_mountstate(status)

            return CommandStatus.Failed if state == MountState.Disabled else CommandStatus.Succeeded

    @Pyro4.expose
    def shutdown(self):
        """Disables motor power and disconnects from mount"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            status = self._request_with_status('status')
            state = _parse_mountstate(status)
            if state == MountState.Disabled:
                return CommandStatus.MountNotInitialized

            if self._request_with_status('mount/disable', axis=-1) is None:
                log.error(self._config.log_name, 'Failed to disable motor power')
                return CommandStatus.Failed

            time.sleep(1)

            if self._request_with_status('mount/disconnect') is None:
                log.error(self._config.log_name, 'Failed to disconnect from mount')
                return CommandStatus.Failed

            return CommandStatus.Succeeded

    @Pyro4.expose
    def stop(self):
        """Stops any active telescope movement"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with self._pointing_condition:
            self._force_stopped = True

            status = self._request_with_status('mount/stop')
            state = _parse_mountstate(status)
            if state == MountState.Disabled:
                return CommandStatus.MountNotInitialized

            self._pointing_condition.notify_all()

        # Block until any other pointing commands have terminated before cleaning up
        with self._command_lock:
            self._force_stopped = False

        return CommandStatus.Succeeded

    @Pyro4.expose
    def slew_altaz(self, alt_deg, az_deg):
        """Moves the telescope to a specified alt, az"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            if not self._axes_homed:
                return CommandStatus.MountNotHomed

            # Check against telescope limits
            status = self._request_with_status('status')
            location = _parse_location(status)
            coords = SkyCoord(alt=alt_deg, az=az_deg, unit=u.deg, frame='altaz',
                              location=location, obstime=Time.now())

            valid_status = self._validate_pointing(coords, 'failed to move to alt {} az {}'.format(alt_deg, az_deg))
            if valid_status != CommandStatus.Succeeded:
                return valid_status

            success = self._point('mount/goto_alt_az', MountState.Stopped, alt_degs=alt_deg, az_degs=az_deg)
            return CommandStatus.Succeeded if success else CommandStatus.Failed

    @Pyro4.expose
    def slew_hadec(self, ha_deg, dec_deg):
        """Moves the telescope to a specified apparent ha, dec"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            if not self._axes_homed:
                return CommandStatus.MountNotHomed

            # Convert apparent HA, Dec to Alt, Az for pointing
            now = Time.now()
            status = self._request_with_status('status')
            location = _parse_location(status)
            coords = SkyCoord(
                ra=Time(now, location=location).sidereal_time('apparent') - ha_deg * u.deg,
                dec=dec_deg * u.deg,
                frame=FK5(equinox=now),
                obstime=now).transform_to(AltAz(obstime=now, location=location))

            # Check against telescope limits
            valid_status = self._validate_pointing(coords, 'failed to move to ha {} dec {}'.format(ha_deg, dec_deg))
            if valid_status != CommandStatus.Succeeded:
                return valid_status

            success = self._point('mount/goto_alt_az', MountState.Stopped,
                                  alt_degs=coords.alt.to_value(u.deg),
                                  az_degs=coords.az.to_value(u.deg))
            return CommandStatus.Succeeded if success else CommandStatus.Failed

    @Pyro4.expose
    def slew_radec(self, ra_deg, dec_deg):
        """Moves the telescope to a specified J2000 ra, dec"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            if not self._axes_homed:
                return CommandStatus.MountNotHomed

            # Convert apparent RA, Dec to Alt, Az for pointing
            now = Time.now()
            status = self._request_with_status('status')
            location = _parse_location(status)
            coords = SkyCoord(
                ra=ra_deg * u.deg,
                dec=dec_deg * u.deg,
                frame='icrs').transform_to(AltAz(obstime=now, location=location))

            # Check against telescope limits
            valid_status = self._validate_pointing(coords, 'failed to move to ra {} dec {}'.format(ra_deg, dec_deg))
            if valid_status != CommandStatus.Succeeded:
                return valid_status

            success = self._point('mount/goto_alt_az', MountState.Stopped,
                                  alt_degs=coords.alt.to_value(u.deg),
                                  az_degs=coords.az.to_value(u.deg))
            return CommandStatus.Succeeded if success else CommandStatus.Failed

    @Pyro4.expose
    def track_radec(self, ra_deg, dec_deg):
        """Moves the telescope to a specified J2000 ra, dec and track at the sidereal rate"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            if not self._axes_homed:
                return CommandStatus.MountNotHomed

            status = self._request_with_status('status')
            location = _parse_location(status)
            coords = SkyCoord(
                ra=ra_deg * u.deg,
                dec=dec_deg * u.deg,
                frame='icrs',
                obstime=Time(Time.now(), location=location))

            # Check against telescope limits
            valid_status = self._validate_pointing(coords, 'failed to move to ra {} dec {}'.format(ra_deg, dec_deg))
            if valid_status != CommandStatus.Succeeded:
                return valid_status

            success = self._point('mount/goto_ra_dec_j2000', MountState.Tracking,
                                  ra_hours=coords.ra.to_value(u.hourangle),
                                  dec_degs=coords.dec.to_value(u.deg))
            return CommandStatus.Succeeded if success else CommandStatus.Failed

    @Pyro4.expose
    def offset_radec(self, ra_delta_deg, dec_delta_deg):
        """Offsets the telescope relative to the current position"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            if not self._axes_homed:
                return CommandStatus.MountNotHomed

            status = self._request_with_status('status')
            state = _parse_mountstate(status)
            location = _parse_location(status)
            now = Time(Time.now(), location=location)

            if state == MountState.Tracking:
                coords = SkyCoord(
                    ra=u.Quantity(status['mount.ra_j2000_hours'], unit=u.hourangle) + ra_delta_deg * u.deg,
                    dec=u.Quantity(status['mount.dec_j2000_degs'], unit=u.deg) + dec_delta_deg * u.deg,
                    frame='icrs',
                    obstime=now)

                # Check against telescope limits
                valid_status = self._validate_pointing(coords, 'failed to offset by ra {} dec {}'.format(ra_delta_deg, dec_delta_deg))
                if valid_status != CommandStatus.Succeeded:
                    return valid_status

                success = self._point('mount/offset', state,
                                      ra_add_arcsec=3600 * ra_delta_deg,
                                      dec_add_arcsec=3600 * dec_delta_deg)
            else:
                # The mount/offset command only works when the mount is tracking,
                # so issue a mount/goto_alt_az command instead
                coords = SkyCoord(
                    alt=status['mount.altitude_degs'],
                    az=status['mount.azimuth_degs'],
                    unit=u.deg,
                    frame='altaz',
                    obstime=now,
                    location=location).transform_to(ICRS)
                coords = SkyCoord(
                    ra=coords.ra + ra_delta_deg * u.deg,
                    dec=coords.dec + dec_delta_deg * u.deg,
                    frame='icrs').transform_to(AltAz(obstime=now, location=location))

                # Check against telescope limits
                valid_status = self._validate_pointing(coords, 'failed to offset by ra {} dec {}'.format(ra_delta_deg, dec_delta_deg))
                if valid_status != CommandStatus.Succeeded:
                    return valid_status

                success = self._point('mount/goto_alt_az', MountState.Stopped,
                                      alt_degs=coords.alt.to_value(u.deg),
                                      az_degs=coords.az.to_value(u.deg))
            return CommandStatus.Succeeded if success else CommandStatus.Failed

    # pylint: disable=no-self-use
    @Pyro4.expose
    def ping(self):
        """Returns immediately with a success status"""
        return CommandStatus.Succeeded
    # pylint: enable=no-self-use


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Telescope Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    c = Config(args.config)
    c.daemon.launch(MountDaemon(c))
